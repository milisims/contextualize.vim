*contextualize.txt*	For Vim version 8.0	Last change: 2021 Jan 20

Author:  Emilia Simmons
License: Same terms as Vim (see |license|)

===============================================================================
                                       *contextualize* *contextualize-contents*
CONTENTS~

    1. Contents ...................................... |contextualize-contents|
    2. Overview ...................................... |contextualize-overview|
    3. Usage ............................................ |contextualize-usage|
    4. Commands ...................................... |contextualize-commands|
    5. Functions .................................... |contextualize-functions|
    6. Examples ...................................... |contextualize-examples|
    7. Issues .......................................... |contextualize-issues|


===============================================================================
OVERVIEW                                               *contextualize-overview*

Contextualize.vim provides set of commands for managing contextual maps.
I assume most people have seen something like the following maps, used to
allow the user to press `<Cr>` to select a menu on the |popup-menu|, and
`<Tab>` and `<S-Tab>` to scroll: >
  inoremap <expr> <Cr> pumvisible() ? "\<C-y>" : "\<Cr>"
  inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
<
This is great! But what if I also want start arming `<Tab>` with a variety of
other context-specific actions? How about this: >
  ContextAdd pumvis {-> pumvisible()}
  Contextualize pumvis inoremap <Cr> <C-y>
  Contextualize pumvis inoremap <Tab> <C-n>
  Contextualize pumvis inoremap <S-Tab> <C-p>

Contextualize will set defaults (when you are not in a context) for `<Cr>`,
`<Tab>`, and `<S-Tab>` to whatever they are already mapped to, if anything.

This plugin functions by maintaining a dictionary of contexts, and a dict
for each contextual map desired. When a contextualize'd map is executed, it
will check each context in order of declaration, and execute the first one
that is successful.
Contextualize.vim may work with vim versions > 7.4, but is currently untested.

===============================================================================
USAGE                                                     *contextualize-usage*

Load the plugin, if you are using a plugin manager that utilizes vim's
|packages| feature, then you might need to load the plugin explicitly to ensure
the commands are defined: `packadd contextualize.vim` (note the lack of `!`)

There are 3 ways to create a context:
1. Naming a function
2. Naming a lambda expression
3. Using an anonymous context directly in a |:Contextualize| command

For example: >
  ContextAdd namedfunc pumvisible
  ContextAdd lambdacontext {-> pumvisible()}
<
Create a context with |ContextAdd|, then map a command as follows: >
  ContextAdd pumv {-> pumvisible()}
  Contextualize pumv inoremap <Tab> <C-n>
  Contextualize pumv inoremap <S-Tab> <C-p>
<
The intent of the commands provided are to drop in front of a map command that
you know functions on its own: >
  map lhs rhs
  unmap lhs

  Contextualize somecontext map lhs rhs
  Decontextualize somecontext unmap lhs
<Works as expected.

===============================================================================
COMMANDS                                               *contextualize-commands*

:ContextAdd [<buffer>] {name} {function}                          *:ContextAdd*
    Create a context. `{function}` can be a function name or |expr-lambda|.
    `{function}` is allowed to take arguments, see |:Contextualize| for usage.

:ContextDel [<buffer>] {name}                                     *:ContextDel*
    Remove a context. All associated maps will be removed as well.
    If the last context map of a key is removed, the book keeping dict
    will be removed.

:Contextualize {context} [args] {mapcmd} [opts] {lhs} [rhs]    *:Contextualize*
    Create a map for `{lhs}` in `{context}`.
    `{mapcmd}` must not be shortened: |:nn| is equivalent to |:nnoremap|, but
    mappings in Contextualize.vim must be explicit and match the full command.
    Additionally, the mode must be added: |:nmap|, |:inoreabbrev|, and
    |:onoremap| are accepted, but |:map| is not.
    Specifically, the command must match the regex:
    `'\v<([nvoicsxlt])(nore|un)?(map|abbrev)>'`

    For example as above:
    `Contextualize pumv inoremap <Tab> <C-n>`

    `[args]` will be passed to the `{function}` from |:ContextAdd|, the number
    of arguments supplied must be supported by the context checking function,
    or an error will be thrown at time of checking the context.

    The `[args]` are for passing arguments to the context function. That is,
    `[args]` are for modifying behavior at the time of mapping.

    If `{context}` is `default`, this map will be executed if all context
    functions evaluate to false. By default, creating a contextmap will
    try to extract your map from `{lhs}` in the appropriate mode and type
    using |maparg()|. If it is empty, the default will be assigned to `{lhs}`.

    If `{context}` is a |lambda| expression, then an anonymous context will be
    created. This context is available only to this map, and arguments are not
    allowed.

    `[opts]` supported are |:map-<buffer>|, |:map-<expr>|, and |:map-<silent>|.

    When executing a mapping, it will check each context in order of
    declaration, executing the first mapping associated with the context that
    returns |TRUE|.

    See |contextualize-examples| for other examples.

:Decontextualize [context] {unmapcmd} <buffer> {lhs}         *:Decontextualize*
    Remove a map for `{lhs}`, `{unmapcmd}` is used to determine the mode
    (insert, normal, etc) and type (`map` or `abbrev`) of the mapping.
    If `[context]` is not provided, all context mappings will be removed from
    `{lhs}` in the appropriate mode/type, including the 'default' context.
    Otherwise it will remove only the mapping in `[context]`.
    If `[context]` is `default`, then the default map will be reset to `{lhs}`
    Usage: >
    Decontextualize pumv imap <Tab>
    Decontextualize imap <Tab>
    Decontextualize default imap <Tab>
<
    Note `imap`, `inoremap`, and `iunmap` are functionally identical here. Only
    the mode and type are extracted.

:InspectContextMap {mapcmd} [<buffer>] {lhs}                 *:Decontextualize*
    Print the contexts and rhs of each map for `{lhs}`.


===============================================================================
FUNCTIONS                                             *contextualize-functions*

contextualize#add_context(name, func[, buffer])   *contextualize#add_context()*
    Create a context named `{name}`, `{func}` should be a funcref.
    `{buffer}` is true or false, if the context should be buffer specific.

contextualize#del_context(name[, buffer])         *contextualize#del_context()*
    Delete a context named `{name}`,
    `{buffer}` is true or false, if the context should be buffer specific.

contextualize#in(name[, args])                             *contextualize#in()*
    Return whether the context called `{name}` is evaluated as true.
    Particularly useful in the |statusline| for testing: >
    set statusline=%!contextualize#in('pumv')
<
contextualize#map(name, mode, type, lhs, rhs[, opts])     *contextualize#map()*
    Create a map in context `{name}`, in mode `{mode}`. `{type}` must be "map"
    or "abbrev". Analagous to >
    Contextualize {name} {opts.args} {mode}{opts.nore}{map} {lhs} {rhs}
<
    `{opts}` is a dictionary containing (optional) keys:
        buffer   |TRUE| if this should be treated like |:map-<buffer>|
        expr     |TRUE| if this should be treated like |:map-<expr>|
        silent   |TRUE| if this should be treated like |:map-<silent>|
        sid      Script id or name to replace any instances of |<SID>| with. The
                 name can be obtained with `expand('<sfile>')`in the script
                 being |:source|d
        args     List of arguments passed to context function.

    If there is no key named `sid`, and there is an `<SID>` in the `{rhs}`,
    an error will be thrown.

contextualize#unmap(name, mode, type, lhs[, buffer])    *contextualize#unmap()*
    Unmap `{lhs}` in context `{name}` in mode `{mode}`. `{type}` must be "map" or
    "abbrev".

===============================================================================
EXAMPLES                                               *contextualize-examples*

Integration with Ultisnips: >
  let g:UltiSnipsExpandTrigger = "<Plug>(myUltiSnipsExpand)"
  let g:UltiSnipsJumpForwardTrigger = "<Plug>(myUltiSnipsForward)"
  let g:UltiSnipsJumpBackwardTrigger = "<Plug>(myUltiSnipsBackward)"
<  Ultisnips will set up maps for these `<Plug>` maps, which we can use in
  various contexts.

  These two maps will be the default >
  imap <Tab> <Plug>(myUltiSnipsExpand)
  xmap <Tab> <Plug>(myUltiSnipsExpand)
<
  Ultisnips provides us conveniently with autocmds for entering/exiting snippets >
  augroup vimrc_contextualize
    autocmd!
    autocmd User UltiSnipsEnterFirstSnippet let g:in_snippet = 1
    autocmd User UltiSnipsExitLastSnippet unlet! g:in_snippet
  augroup END

  ContextAdd insnippet {-> exists('g:in_snippet')}
  ContextAdd pumvis {-> pumvisible()}
  Contextualize pumvis imap <Tab> <C-n>
  Contextualize pumvis imap <S-Tab> <C-p>
  Contextualize insnippet imap <Tab> <Plug>(myUltiSnipsForward)
  Contextualize insnippet imap <S-Tab> <Plug>(myUltiSnipsBackward)
  Contextualize insnippet smap <Tab> <Plug>(myUltiSnipsForward)
  Contextualize insnippet smap <S-Tab> <Plug>(myUltiSnipsBackward)
<

Command line abbreviations that only work at the start of the command line.
Here we use a dict function so we don't have to use an argument for each of the
context maps. >
  function! s:startcmd() abort dict
    return getcmdtype()==":" && getcmdline()==self.lhs
  endfunction
  ContextAdd startcmd s:startcmd
<  Here, the s: is parsed properly as long as ContextAdd is executed from
  within a script
>

  " vimgrep all files with same filetype: expand this one by typing /
  Contextualize startcmd cnoreabbrev <expr> vga 'vimgrep / **/*.' . expand('%:e') . "\<C-Left><Left><Left>"
  Contextualize startcmd cnoreabbrev h vert help

  " Clear [loc/qf] list
  Contextualize startcmd cnoreabbrev cll call setloclist(empty(<q-args>) ? 0 : bufnr(<q-args>), [])
  Contextualize startcmd cnoreabbrev cqf call setqflist([])
<

Autopairs funcionality, this can be easily expanded upon thoroughly, to fine
tune exactly how you want your autopairs to behave: >

  ContextAdd pairallowed {-> getline('.')[col('.') - 1] =~ '\W' || col('.') == col('$')}
  ContextAdd completepair {close -> getline('.')[col('.') - 1] == close}
  ContextAdd pairsurround {-> getline('.')[col('.') - 2 : col('.')] =~ '^\%(\V()\|{}\|[]\|''''\|""\)'}
  ContextAdd quoteallowed {-> getline('.')[col('.') - 2 : col('.') - 1] !~ '\w'}

  for pair in ['()', '[]', '{}']
    call contextualize#map('pairallowed' , 'i', 'map', pair[0], pair . '<C-g>U<Left>')
    call contextualize#map('pairallowed' , 's', 'map', pair[0], pair . '<C-g>U<Left>')
    call contextualize#map('completepair', 'i', 'map', pair[1], '<C-g>U<Right>', {'args': pair[1]})
  endfor

  Contextualize completepair ' inoremap ' <C-g>U<Right>
  Contextualize completepair " inoremap " <C-g>U<Right>
  Contextualize quoteallowed inoremap ' ''<C-g>U<Left>
  Contextualize quoteallowed inoremap " ""<C-g>U<Left>
  Contextualize quoteallowed snoremap ' ''<C-g>U<Left>
  Contextualize quoteallowed snoremap " ""<C-g>U<Left>

  Contextualize pairsurround inoremap <Bs> <BS><Del>
  Contextualize pairsurround inoremap <Cr> <Cr><C-o>O
  Contextualize pairsurround inoremap <Space> <Space><Space><C-g>U<Left>
<

==============================================================================
ISSUES                                                  *contextualize-issues*

|feedkeys()| and |:normal| may not behave as expected when using
context-sensitive maps. For example, with the following maps:
>
  ContextAdd emptyline {-> empty(getline('.'))}
  Contextualize emptyline inoremap a aa
<
Opening a new line and typing `aa` in insert mode will yield `aaa`. However,
the results from `feedkeys('oaa')` is `aaaa` (regardless of flags). It looks
like vim remaps each `a` at the same time, effectively, for this example.

A workaround would be to use multiple |feedkeys()| calls. |:normal| has the
same caveats.

If you make use of 'langmap', then this plugin is unlikely to work for you. It
heavily relies on |<Plug>| maps. For more, see:
https://github.com/vim/vim/issues/5147


vim:tw=78:et:ft=help:norl:
